/**
 * @file proj.h
 * @author Pedro Costa, Jo√£o Fidalgo
 * @date 27 Dec 2017
 * @brief File that initialize and handles the flow of the game.
 *
 */

#ifndef __PROJ_H
#define __PROJ_H

/** @defgroup proj proj
 * @{
 *
 * Module that handles the game and connects the user to the game.
 */

/**
 * MACROS FOR THE MENUS
 */


// START RECTANGLE
#define START_RECT_X 373
#define START_RECT_Y 305
#define START_RECT_X_SIZE 277
#define START_RECT_Y_SIZE 103

// EXIT RECTANGLE
#define EXIT_RECT_X 373
#define EXIT_RECT_Y 461
#define EXIT_RECT_X_SIZE 277
#define EXIT_RECT_Y_SIZE 103

// HIGHSCORE RECTANGLE
#define HIGH_RECT_X 736
#define HIGH_RECT_Y 650
#define HIGH_RECT_X_SIZE 277
#define HIGH_RECT_Y_SIZE 103

// EXIT HIGHSCORE RECTANGLE
#define EXIT_HIGH_RECT_X 785
#define EXIT_HIGH_RECT_Y 639
#define EXIT_HIGH_RECT_X_SIZE 213
#define EXIT_HIGH_RECT_Y_SIZE 88

//GOALS
#define GOAL_TIMEOUT 50
#define GOAL_X 150
#define GOAL_Y 300

#define WON_X 50
#define WON_Y 150
#define WON_TIMEOUT 100

/** @name Events Types */
/**@{
 *
 * @brief Enumeration possible events generated by the devices
 * These events will be passed into the event handler.
 */
typedef enum {

	NEW_FRAME_EVENT, /**< Event generated by Timer when a new frame occurs */
	KEYSTROKE_EVENT, /**< Event generated by the KBC when the user presses a key */
	MOUSESTROKE_EVENT /**< Event generated by the KBC when the user moves the mouse */

} EVENT_TYPE;

/** @} end of Events Types */

/** @name State Types */
/**@{
 *
 *@brief Enumeration of the possible game states
 *
 */
typedef enum {

	MAIN_MENU_STATE, /**< Main menu state, the first one available to the user and the connection to every other state */
	GAME_STATE, /**< Game State, where two players can actually play the game */
	EXIT_STATE, /**< Exiting the game */
	HIGH_SCORE_STATE /**< HighScore State where the user can see the previous Highscores */

} STATE_TYPE;

/** @} end of State Types */

/**
 * @brief The General Event Handler
 *
 * This handler is called every time a new event occurs, no matter the type of the event.
 * After receiving it, it will call a more specific event handler depending on the current State of the game.
 * The state of the game will later be updated by these more specific event handlers.
 *
 * @param event - the type of event
 * @return 1 if the exit state was reached, 0 otherwise (game still running)
 */
int eventHandler(EVENT_TYPE event);

/**
 * @brief Main Menu Dedicated Handler
 *
 * During this state, the user can start the game, exit it and see the highscores.
 * It can do these by using the mouse (with movement and buttons) and the keyboard (pressing ESC to return).
 * Depending on what the user does, this function will return a new game state.
 *
 * @return STATE_TYPE - the new state the user chose
 */
STATE_TYPE menuEventHandler(EVENT_TYPE event);

/**
 * @brief Game Dedicated Handler
 *
 * The game handler, reacting to inputs given by the keyboard and the timer.
 * This state will end upon reaching the final given time, scoring 3 goals or pressing ESC.
 *
 * @return STATE_TYPE - the new game state.
 *
 */
STATE_TYPE gameEventHandler(EVENT_TYPE event);

/**
 * @brief HighScore dedicated handler
 *
 * During this state the user can see the highscores.
 * By pressing the exit button or pressing ESC the user can return to the main menu.
 *
 * @return STATE_TYPE - the new game state.
 */

STATE_TYPE gameHighScoreHandler(EVENT_TYPE event);

/**
 * @brief Initializes all the resources needed for the game.
 *
 * Those resources include the Mouse, Ball, Bitmaps, Rectangles, Players.
 *
 * @return 0 upon success, 1 otherwise
 */
int initializeGame();

/** @} end of proj */

#endif
